{
  "name": "orbit-camera",
  "version": "0.0.1",
  "description": "Orbiting 3D camera for WebGL",
  "main": "orbit.js",
  "directories": {
    "example": "example"
  },
  "dependencies": {
    "gl-matrix": "~2.0.0"
  },
  "devDependencies": {
    "bunny": "~1.0.0",
    "simple-3d-shader": "~0.0.0",
    "gl-mesh": "~0.1.0",
    "gl-now": "~0.0.3"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mikolalysenko/orbit-camera.git"
  },
  "keywords": [
    "orbit",
    "camera"
  ],
  "author": {
    "name": "Mikola Lysenko"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "gitHead": "861a37161753635080e15b6567ede6a5f30b0ae5",
  "bugs": {
    "url": "https://github.com/mikolalysenko/orbit-camera/issues"
  },
  "readme": "orbit-camera\n============\nSimple arcball camera built on top of gl-matrix\n\n## Example\n\n```javascript\nvar shell = require(\"gl-now\")()\nvar createMesh = require(\"gl-mesh\")\nvar glm = require(\"gl-matrix\")\nvar mat4 = glm.mat4\nvar simple3DShader = require(\"simple-3d-shader\")\nvar createOrbitCamera = require(\"orbit-camera\")\n\nvar camera = createOrbitCamera([0, 10, 20],\n                               [0, 3, 0],\n                               [0, 1, 0])\n\nvar shader, mesh\n\nshell.on(\"gl-init\", function() {\n  shader = simple3DShader(shell.gl)\n  mesh = createMesh(shell.gl, require(\"bunny\"))\n})\n\nshell.on(\"gl-render\", function(t) {\n  shader.bind()\n\n  var scratch = mat4.create()\n  shader.uniforms.model = scratch\n  shader.uniforms.projection = mat4.perspective(scratch, Math.PI/4.0, shell.width/shell.height, 0.1, 1000.0)\n  shader.uniforms.view = camera.view(scratch)\n  \n  mesh.bind(shader)\n  mesh.draw()\n  mesh.unbind()\n})\n\nshell.on(\"tick\", function() {\n  if(shell.wasDown(\"mouse-left\")) {\n    camera.rotate([shell.mouseX/shell.width-0.5, shell.mouseY/shell.height-0.5],\n                  [shell.prevMouseX/shell.width-0.5, shell.prevMouseY/shell.height-0.5])\n  }\n  if(shell.wasDown(\"mouse-right\")) {\n    camera.pan([10*(shell.mouseX-shell.prevMouseX)/shell.width,\n                10*(shell.mouseY - shell.prevMouseY)/shell.height])\n  }\n  if(shell.scroll[1]) {\n    camera.zoom(shell.scroll[1] * 0.1)\n  }\n})\n```\n\n## Install\n\n    npm install orbit-camera\n    \n## API\n\n```javascript\nvar createOrbitCamera = require(\"orbit-camera\")\n```\n\n### `var camera = createOrbitCamera(eye, center, up)`\nCreates an orbit camera looking at `center`.  This has the same semantics as `gluLookAt`\n\n* `eye` is the eye vector of the camera\n* `center` is the target the camera is looking at\n* `up` is the up direction for the camera\n\n**Returns** A new orbit camera object\n\n### `camera.lookAt(eye, center, up)`\nMove the camera to look at the new position.\n\n### `camera.pan(translation)`\nMoves the center of the camera by `translation`.  Note that translation must be an array of length either 2 or 3\n\n### `camera.rotate(cur, prev)`\nApplies a rotation to the camera.  `cur` and `prev` are the state of the previous locations.  These can be pairs of 2D arrays representing the mouse coordinates in distance relative to the center of the sceen.\n\n### `camera.zoom(delta)`\nZooms in or out by some amount\n\n### `camera.view([out])`\nReturns the current view matrix associated to the camera\n\n## Credits\n(c) 2013 Mikola Lysenko. MIT License\n",
  "homepage": "https://github.com/mikolalysenko/orbit-camera",
  "_id": "orbit-camera@0.0.1",
  "_from": "orbit-camera@~0.0.1"
}
