{
  "name": "colormap",
  "version": "0.3.7",
  "description": "Easily output great looking predefined hex or rgb color maps",
  "author": {
    "name": "bpostlethwaite"
  },
  "dependencies": {
    "arraytools": ">=0.1.7"
  },
  "devDependencies": {
    "tap": ">0.2",
    "tape": ">0.2"
  },
  "main": "index.js",
  "scripts": {
    "test": "tap test/*.js"
  },
  "testling": {
    "files": "test/*.js",
    "browsers": [
      "ie/9..latest",
      "chrome/20..latest",
      "firefox/13..latest",
      "safari/latest",
      "opera/11.0..latest",
      "iphone/6",
      "ipad/6"
    ]
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/bpostlethwaite/colormap.git"
  },
  "keywords": [
    "colormap",
    "color map",
    "color",
    "hex",
    "rgb",
    "color gradient",
    "color range",
    "color scale",
    "plot",
    "graph"
  ],
  "license": "MIT",
  "readme": "# colormap\n\nOutput predefined color maps in hex or rgb. Note: these are based on [Matlab's colormaps](http://www.mathworks.com/help/matlab/ref/colormap.html)\n\n[![browser support](http://ci.testling.com/bpostlethwaite/colormap.png)](http://ci.testling.com/bpostlethwaite/colormap)\n[![Build Status](https://travis-ci.org/bpostlethwaite/colormap.png)](https://travis-ci.org/bpostlethwaite/colormap)\n\n![all colormap output](http://img195.imageshack.us/img195/5052/colormap.png)\n\nSuper simple just do,\n```javascript\noptions = {\n  colormap: \"jet\"   // pick your colormap\n, nshades: 72       // how many divisions\n, format: \"hex\"     // \"hex\" or \"rgb\"\n}\ncg = colormap(options)\n```\nwhere leaving `options = {}` or `undefined` results in the defaults given above. There is a minimum number of `nshades` divisions you can select since the algorithms for each colormap have different requirements. `colormap` throws an error if there are too few divisions for the chosen colormap and gives the minimum number required. You should be safe with `n > 10` for all the colormaps, though some require much less (much simpler to implemenent).\n\nHere is a more complete example which also defines all the currently available color maps.\n\n## Example\n```javascript\nvar cmap = require('colormap')\n\nvar canvas = document.getElementById('canvas')\n  , c = canvas.getContext('2d')\n\nvar n = 48\n\n// Display all the colormaps\nvar cms = ['jet', 'hsv' ,'hot', 'cool', 'spring', 'summer', 'autumn',\n           'winter', 'gray', 'bone', 'copper']\n\nvar i, j, cg\nfor (i = 0; i < cms.length; i++) {\n  /*\n   * Call colormap with each type\n   */\n  cg = cmap({'colormap': cms[i], 'nshades': n })\n\n  /*\n   * Build up the color ranges and add text\n   */\n  for (j = 0; j < n; j++) {\n    c.fillStyle = cg[j] // start ind at index 0\n    c.fillRect(j*10, i*40, 10, 40)\n\n  }\n  c.fillStyle = \"#262626\"\n  c.font = \"16px Helvetica\";\n  c.fillText( cms[i], n*10 + 10, i * 40 + 26);\n}\n```\n\nThen just [browserify](https://github.com/substack/node-browserify) it and throw it in some html and it will output the image above!\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/bpostlethwaite/colormap/issues"
  },
  "homepage": "https://github.com/bpostlethwaite/colormap",
  "_id": "colormap@0.3.7",
  "_from": "colormap@^0.3.7"
}
