{
  "name": "binary-search-bounds",
  "version": "0.3.1",
  "description": "Better binary searching",
  "main": "search-bounds.js",
  "directories": {
    "test": "test"
  },
  "dependencies": {},
  "devDependencies": {
    "tape": "~2.0.0",
    "tap": "~0.4.4",
    "ndarray": "~1.0.8"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mikolalysenko/binary-search-bounds.git"
  },
  "keywords": [
    "binary",
    "search",
    "bounds",
    "least",
    "lower",
    "greatest",
    "upper"
  ],
  "author": {
    "name": "Mikola Lysenko"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/mikolalysenko/binary-search-bounds/issues"
  },
  "readme": "binary-search-bounds\n====================\nBinary search on arrays.  Also works if the inputs are 1D [ndarrays](https://github.com/mikolalysenko/ndarray).\n\n## API\n\n```javascript\nvar bounds = require(\"binary-search-bounds\")\n```\n\n### `bounds.lt(array, y[, cmp, lo, hi])`\nReturns the index of the last item in the array `<` y\n\n### `bounds.le(array, y[, cmp, lo, hi])`\nReturns the index of the last item in the array `<=` y\n\n### `bounds.gt(array, y[, cmp, lo, hi])`\nReturns the index of the first item in the array `>` y\n\n### `bounds.ge(array, y[, cmp, lo, hi])`\nReturns the index of the first item in the array `>=` y\n\n### `bounds.eq(array, y[, cmp, lo, hi])`\nReturns an index of some item in the array `== y`.  `-1` if not found.\n\n### Notes\n\n* `array` can be either an array or an [`ndarray`](https://github.com/mikolalysenko/ndarray)\n* `cmp` is a comparison function, just like what you would pass to `Array.sort()`\n* `y` will always be the second argument passed to `cmp`, so you can ignore it if you are just binary searching on a predicate\n* Assumes the array is sorted as would be the case if you called `Array.sort(cmp)` on it\n* If no comparison is passed, assume array is sorted in ascending order (note this is different than the semantics of Array.sort() which converts all entries to strings if you don't pass an argument)\n* `lo` gives a lower bound on the array index to search\n* `hi` gives an upper bound on the array index to search\n* `bounds.le` and `bounds.lt` will return `lo - 1` if no element is found satisfying the predicate\n* `bounds.ge` and `bounds.gt` will return `hi + 1` if no element is found satisfying the predicate\n* `bounds.eq` will return the first found item with the given index.  It can be a little faster than the other methods if you just want to find some random match.\n\n## Credits\n(c) 2013 Mikola Lysenko. MIT License",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/mikolalysenko/binary-search-bounds",
  "_id": "binary-search-bounds@0.3.1",
  "_from": "binary-search-bounds@~0.3.1"
}
