{
  "name": "frame-hop",
  "version": "0.0.0",
  "description": "Frame slicing for windowed signal processing",
  "main": "hop.js",
  "directories": {
    "test": "test"
  },
  "dependencies": {},
  "devDependencies": {
    "tape": "~1.0.4"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mikolalysenko/frame-hop.git"
  },
  "keywords": [
    "frame",
    "window",
    "slice",
    "hop",
    "audio",
    "signal",
    "processing",
    "stream"
  ],
  "author": {
    "name": "Mikola Lysenko"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "gitHead": "5d96937577bbbd707c56b471c954e7360a7d9ace",
  "bugs": {
    "url": "https://github.com/mikolalysenko/frame-hop/issues"
  },
  "readme": "frame-hop\n=========\nCuts a stream of floating point frames into a stream of partially overlapping frames.\n\n## Example\n\n```javascript\n//Create frame slicer\nvar slicer = require(\"frame-hop\")(256, 64, function(frame) {\n  console.log(\"Got a frame!\", frame)\n})\n\n//Add frames to slices by calling slicer:\nslicer(data)\n```\n\n## Install\n\n    npm install frame-hop\n\n#### `require(\"frame-hop\")(frame_size, hop_size, ondata[, max_data_size])`\nCreates a windowed frame slicer\n\n* `frame_size` is the size of an output frame\n* `hop_size` is the amount of hopping between frames\n* `ondata(frame)` is a callback that executed once per each frame that is sliced\n* `max_data_size` is the maximum amount of data per input frame (default `frame_size`)\n\n**Returns** A function `slicer(data)` which adds some amount of data to the rolling frame buffer.\n\n## Credits\n(c) 2013 Mikola Lysenko. MIT License\n",
  "homepage": "https://github.com/mikolalysenko/frame-hop",
  "_id": "frame-hop@0.0.0",
  "_from": "frame-hop@~0.0.0"
}
