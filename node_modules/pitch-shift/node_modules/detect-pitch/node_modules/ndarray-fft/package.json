{
  "name": "ndarray-fft",
  "version": "0.0.2",
  "description": "FFT for ndarrays",
  "main": "fft.js",
  "directories": {
    "test": "test"
  },
  "dependencies": {
    "bit-twiddle": "~0.0.2",
    "ndarray": "~0.2.0",
    "ndarray-ops": "~0.1.3",
    "cwise": "~0.1.2",
    "typedarray-pool": "0.0.1"
  },
  "devDependencies": {
    "almost-equal": "~0.0.0",
    "tap": "~0.4.2"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mikolalysenko/ndarray-fft.git"
  },
  "keywords": [
    "ndarray",
    "fft",
    "fourier",
    "transform",
    "convolution",
    "bluestein",
    "radix",
    "2",
    "image",
    "volume",
    "filter",
    "signal"
  ],
  "author": {
    "name": "Mikola Lysenko"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "gitHead": "1847ab09f0f2fdc1103bca773b7bc0b0bd55b12d",
  "readme": "ndarray-fft\n===========\nA fast Fourier transform implementation for [ndarrays](https://github.com/mikolalysenko/ndarray).  You can use this to do image processing operations on big, higher dimensional typed arrays in JavaScript.\n\n## Example\n\n```javascript\nvar ndarray = require(\"ndarray\")\nvar ops = require(\"ndarray-ops\")\nvar fft = require(\"ndarray-fft\")\n\nvar x = ops.random(ndarray.zeros([256, 256]))\n  , y = ops.random(ndarray.zeros([256, 256]))\n\n//Forward transform x/y\nfft(1, x, y)\n\n//Invert transform\nfft(-1, x, y)\n```\n\n## Install\nVia npm:\n\n    npm install ndarray-fft\n\n\n### `require(\"ndarray-fft\")(dir, x, y)`\nExecutes a fast Fourier transform on the complex valued array x/y.  \n\n* `dir` - Either +/- 1.  Determines whether to use a forward or inverse FFT\n* `x` the real part of the signal, encoded as an ndarray\n* `y` the imaginary part of the signal, encoded as an ndarray\n\n`x` and `y` are transformed in place.\n\n**Note** This code is fastest when the components of the shapes arrays are all powers of two.  For non-power of two shapes, Bluestein's fft is used which is somewhat slower.\n\n# Credits\n(c) 2013 Mikola Lysenko.  MIT License.\n\nRadix 2 FFT based on code by Paul Bourke.",
  "bugs": {
    "url": "https://github.com/mikolalysenko/ndarray-fft/issues"
  },
  "homepage": "https://github.com/mikolalysenko/ndarray-fft",
  "_id": "ndarray-fft@0.0.2",
  "_from": "ndarray-fft@~0.0.2"
}
