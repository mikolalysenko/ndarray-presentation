{
  "name": "cssauron",
  "version": "0.0.2",
  "description": "create matching selectors from css for your very own nested object hierarchy",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "node test/index.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/chrisdickinson/cssauron.git"
  },
  "keywords": [
    "css",
    "selector",
    "parser",
    "match"
  ],
  "author": {
    "name": "Chris Dickinson",
    "email": "chris@neversaw.us"
  },
  "license": "MIT",
  "readme": "# cssauron\n\nbuild a matching function in CSS for any nested object structure!\n\n```javascript\nvar language = require('cssauron')({\n    tag: 'tagName'\n  , contents: 'innerText'\n  , id: 'id'\n  , class: 'className'\n  , parent: 'parentNode'\n  , children: 'childNodes'\n  , attr: 'getAttribute(attr)'\n})\n\nvar selector = language('body > #header .logo')\n  , element = document.getElementsByClassName('logo')[0]\n\nif(selector(element)) {\n  // element matches selector\n} else {\n  // element does not match selector\n}\n```\n\n# API\n\n### require('cssauron')(options) -> selector factory\n\nImport `cssauron` and configure it for the nested object structure you'll\nwant to match against.\n\n#### options\n\n`options` are an object hash of lookup type to string attribute or `function(node)` lookups for queried\nnodes. You only need to provide the configuration necessary for the selectors you're planning on creating.\n(If you're not going to use `#id` lookups, there's no need to provide the `id` lookup in your options.)\n\n* `tag`: Extract tag information from a node for `div` style selectors.\n* `contents`: Extract text information from a node, for `:contains(xxx)` selectors.\n* `id`: Extract id for `#my_sweet_id` selectors.\n* `class`: `.class_name`\n* `parent`: Used to traverse up from the current node, for composite selectors `body #wrapper`, `body > #wrapper`.\n* `children`: Used to traverse from a parent to its children for sibling selectors `div + span`, `a ~ p`.\n* `attr`: Used to extract attribute information, for `[attr=thing]` style selectors.\n\n### selector_factory('some selector') -> match function\n\nCompiles a matching function.\n\n### match(node) -> true or false\n\nReturns true or false depending on whether the provided node matches the selector.\n\n## Supported pseudoclasses \n\n`:first-child`\n`:last-child`\n`:empty`\n`:root`\n`:contains(text)`\n\n## Supported attribute lookups\n\n`[attr=value]`: Exact match\n`[attr]`: Attribute exists and is not false-y.\n`[attr$=value]`: Attribute ends with value\n`[attr^=value]`: Attribute starts with value\n`[attr*=value]`: Attribute contains value\n`[attr~=value]`: Attribute, split by whitespace, contains value.\n`[attr|=value]`: Attribute, split by `-`, contains value.\n\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/chrisdickinson/cssauron/issues"
  },
  "homepage": "https://github.com/chrisdickinson/cssauron",
  "_id": "cssauron@0.0.2",
  "_from": "cssauron@0.0.2"
}
