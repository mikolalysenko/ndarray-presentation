{
  "name": "gl-shader-core",
  "version": "2.0.0",
  "description": "Core implementation of gl-shader without parser dependencies",
  "main": "shader-core.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mikolalysenko/gl-shader-core.git"
  },
  "keywords": [
    "webgl",
    "shader"
  ],
  "author": {
    "name": "Mikola Lysenko"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/mikolalysenko/gl-shader-core/issues"
  },
  "dependencies": {
    "dup": "^0.0.0"
  },
  "readme": "gl-shader-core\n==============\nThe core of [gl-shader](https://github.com/mikolalysenko/gl-shader), without the parser.  It can be used to compile shaders without including the (relatively large) glsl-parser dependencies, or invoked directly by libraries which use a transform.\n\n## Install\n\n    npm install gl-shader-core\n    \n## API\n\n### `var shader = require(\"gl-shader-core\")(gl, vertexSource, fragmentSource, uniforms, attributes)`\nConstructs a packaged gl-shader object with shims for all of the uniforms and attributes in the program.\n\n* `gl` is the webgl context in which the program will be created\n* `vertexSource` is the source code for the vertex shader\n* `fragmentSource` is the source code for the fragment shader\n* `uniforms` is a list of all uniforms exported by the shader program\n* `attributes` is a list of all attributes exported by the shader program\n\nThe uniform and attributes variables have output which is consistent with [glsl-extract](https://npmjs.org/package/glsl-extract)\n\n**Returns** A compiled shader object.\n\n\n## Methods\n\n### `shader.bind()`\nBinds the shader for rendering\n\n### `shader.dispose()`\nDeletes the shader program and associated resources.\n\n## Properties\n\n### `gl`\nThe WebGL context associated to the shader\n\n### `handle`\nA handle to the underlying WebGL program object\n\n### `vertexShader`\nA handle to the underlying WebGL fragment shader object\n\n### `fragmentShader`\nA handle to the underlying WebGL vertex shader object\n\n## Uniforms\nThe uniforms for the shader program are packaged up as properties in the `shader.uniforms` object.  For example, to update a scalar uniform you can just assign to it:\n\n```javascript\nshader.uniforms.scalar = 1.0\n```\n\nWhile you can update vector uniforms by writing an array to them:\n\n```javascript\nshader.uniforms.vector = [1,0,1,0]\n```\n\nMatrix uniforms must have their arrays flattened first:\n\n```javascript\nshader.uniforms.matrix = [ 1, 0, 1, 0,\n                           0, 1, 0, 0,\n                           0, 0, 1, 1,\n                           0, 0, 0, 1 ]\n```\n\nYou can also read the value of uniform too if the underlying shader is currently bound.  For example,\n\n```javascript\nconsole.log(shader.uniforms.scalar)\nconsole.log(shader.uniforms.vector)\nconsole.log(shader.uniforms.matrix)\n```\n\nStruct uniforms can also be accessed using the normal dot property syntax.  For example,\n\n```javascript\nshader.uniforms.light[0].color = [1, 0, 0, 1]\n```\n\n## Attributes\n\nThe basic idea behind the attribute interface is similar to that for uniforms, however because attributes can be either a constant value or get values from a vertex array they have a slightly more complicated interface.  All of the attributes are stored in the `shader.attributes` property.\n\n### `attrib = constant`\nFor non-array attributes you can set the constant value to be broadcast across all vertices.  For example, to set the vertex color of a shader to a constant you could do:\n\n```javascript\nshader.attributes.color = [1, 0, 0, 1]\n```\n\nThis internally uses [`gl.vertexAttribnf`](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glVertexAttrib.xml). Setting the attribute will also call `gl.disableVertexAttribArray` on the attribute's location.\n\n### `attrib.location`\nThis property accesses the location of the attribute.  You can assign/read from it to modify the location of the attribute.  For example, you can update the location by doing:\n\n```javascript\nattrib.location = 0\n```\n\nOr you can read the currently bound location back by just accessing it:\n\n```javascript\nconsole.log(attrib.location)\n```\n\nInternally, these methods just call [`gl.bindAttribLocation`](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glBindAttribLocation.xml) and access the stored location.\n\n**WARNING** Changing the attribute location requires recompiling the program.  Do not dynamically modify this variable in your render loop.\n\n### `attrib.pointer([type, normalized, stride, offset])`\nA shortcut for `gl.vertexAttribPointer`/`gl.enableVertexAttribArray`.  See the [OpenGL man page for details on how this works](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glVertexAttribPointer.xml).  The main difference here is that the WebGL context, size and index are known and so these parameters are bound.\n\n* `type` is the type of the pointer (default `gl.FLOAT`)\n* `normalized` specifies whether fixed-point data values should be normalized (`true`) or converted directly as fixed-point values (`false`) when they are accessed.  (Default `false`)\n* `stride` the byte offset between consecutive generic vertex attributes.  (Default: `0`)\n* `offset` offset of the first element of the array in bytes. (Default `0`)\n\n## Reflection\n\nFinally, the library supports some reflection capabilities.  The set of all uniforms and data types are stored in the \"type\" property of the shader object,\n\n```javascript\nconsole.log(shader.types)\n```\n\nThis reflects the uniform and attribute parameters that were passed to the shader constructor.\n\n\n## Credits\n(c) 2013 Mikola Lysenko. MIT License",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/mikolalysenko/gl-shader-core",
  "_id": "gl-shader-core@2.0.0",
  "_from": "gl-shader-core@^2.0.0"
}
