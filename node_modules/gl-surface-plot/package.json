{
  "name": "gl-surface-plot",
  "version": "0.0.1",
  "description": "Renders 2D surfaces",
  "main": "surface.js",
  "directories": {
    "example": "example"
  },
  "dependencies": {
    "glslify": "^1.0.0",
    "gl-buffer": "^2.0.3",
    "gl-vao": "^1.1.1",
    "gl-texture2d": "^0.1.11",
    "typedarray-pool": "^0.1.2",
    "ndarray-pack": "^1.0.1",
    "ndarray-ops": "^1.2.1",
    "colormap": "^0.3.7"
  },
  "devDependencies": {
    "gl-now": "0.0.4",
    "game-shell-orbit-camera": "0.0.0",
    "ndarray": "~1.0.10",
    "ndarray-fill": "~0.1.0",
    "gl-matrix": "~2.0.0",
    "dirichlet": "0.0.0",
    "beefy": "~1.0.0",
    "browserify": "~2.36.1"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "beefy --open --live example/example.js"
  },
  "browserify": {
    "transform": [
      "glslify"
    ]
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mikolalysenko/gl-surface-plot.git"
  },
  "keywords": [
    "plot",
    "surface",
    "webgl",
    "visualization",
    "surf",
    "height",
    "field"
  ],
  "author": {
    "name": "Mikola Lysenko"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/mikolalysenko/gl-surface-plot/issues"
  },
  "homepage": "https://github.com/mikolalysenko/gl-surface-plot",
  "readme": "gl-surface-plot\n===============\nDraws a surface plot\n\n## Example\n\n```javascript\nvar shell = require(\"gl-now\")({ clearColor: [0,0,0,0] })\nvar camera = require(\"game-shell-orbit-camera\")(shell)\nvar createSurfacePlot = require(\"gl-surface-plot\")\nvar ndarray = require(\"ndarray\")\nvar fill = require(\"ndarray-fill\")\nvar diric = require(\"dirichlet\")\nvar glm = require(\"gl-matrix\")\nvar mat4 = glm.mat4\n\nvar surface\n\nshell.on(\"gl-init\", function() {\n  var gl = shell.gl\n  gl.enable(gl.DEPTH_TEST)\n\n  //Set up camera\n  camera.lookAt(\n    [0, 0, 2],      //Eye position\n    [256, 256, 64], //Eye target\n    [0, 0, 1])      //Up direction\n\n  //Create field\n  var field = ndarray(new Float32Array(512*512), [512,512])\n  fill(field, function(x,y) {\n    return 128 * diric(10, 10.0*(x-256)/512) * diric(10, 10.0*(y-256)/512)\n  })\n  surface = createSurface(gl, field)\n})\n\nshell.on(\"gl-render\", function() {\n  surface.draw({\n    view: camera.view(),\n    projection:  mat4.perspective(new Array(16), Math.PI/4.0, shell.width/shell.height, 0.1, 10000.0)\n  })\n})\n```\n\nHere is what this should look like:\n\n<img src=\"plot.png\">\n\n[Test it in your browser (requires WebGL)](http://mikolalysenko.github.io/gl-surface-plot/)\n\n## Install\n\n```\nnpm install gl-surface-plot\n```\n\n## API\n\n```javascript\nvar createSurfacePlot = require(\"gl-surface-plot\")\n```\n\n### `var surface = createSurfacePlot(gl, field[, params])`\nCreates a surface plot object\n\n* `gl` is a WebGL context\n* `field` is a 2D ndarray\n* `params` is an optional collection of arguments that contains any of the following:\n\n    + `colormap` - the name of the color map to use for the surface (default \"jet\")\n\n**Returns** A surface object\n\n### `surface.update(params)`\nUpdates the surface.  The parameter object may contain any of the following properties:\n\n* `field` a new 2D field encoded as an ndarray\n* `colormap` the name of the new color map for the surface\n\n### `surface.draw([params])`\nDraws the surface.  Accepts the following parameters\n\n* `model` the 4x4 model matrix (in gl-matrix format)\n* `view` the 4x4 view matrix\n* `projection` the 4x4 projection matrix\n\n### `surface.dispose()`\nDestroys the surface, releases all associated WebGL resources\n\n### `surface.bounds`\nA pair of 3D arrays representing the lower/upper bounding box for the surface plot.\n\n## License\nMIT License.",
  "readmeFilename": "README.md",
  "_id": "gl-surface-plot@0.0.1",
  "_from": "gl-surface-plot@"
}
